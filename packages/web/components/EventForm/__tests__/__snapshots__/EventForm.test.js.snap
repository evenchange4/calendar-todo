// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render EventForm 1`] = `
<MockedProvider
  addTypename={false}
  mocks={Array []}
>
  <ApolloProvider
    client={
      ApolloClient {
        "__operations_cache__": Map {},
        "cache": InMemoryCache {
          "addTypename": false,
          "config": Object {
            "addTypename": false,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "storeFactory": [Function],
          },
          "data": ObjectCache {
            "data": Object {},
          },
          "optimistic": Array [],
          "silenceBroadcast": false,
          "typenameDocumentCache": WeakMap {},
          "watches": Array [],
        },
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": ApolloLink {
          "request": [Function],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "ssrMode": false,
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": false,
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "storeFactory": [Function],
            },
            "data": ObjectCache {
              "data": Object {},
            },
            "optimistic": Array [],
            "silenceBroadcast": false,
            "typenameDocumentCache": WeakMap {},
            "watches": Array [],
          },
        },
        "version": "2.3.7",
        "watchQuery": [Function],
      }
    }
  >
    <EventForm
      onHide={[Function]}
      open={false}
    >
      <WithFormik(insertEvent(updateEvent(PureEventForm)))
        onHide={[Function]}
        open={false}
      >
        <Formik
          enableReinitialize={true}
          initialValues={
            Object {
              "description": "",
              "end": 2018-08-07T12:34:56.000Z,
              "location": "",
              "start": 2018-08-07T12:34:56.000Z,
              "summary": "",
            }
          }
          isInitialValid={false}
          onHide={[Function]}
          onSubmit={[Function]}
          open={false}
          render={[Function]}
          validate={[Function]}
          validateOnBlur={true}
          validateOnChange={true}
        >
          <insertEvent(updateEvent(PureEventForm))
            dirty={false}
            errors={Object {}}
            handleBlur={[Function]}
            handleChange={[Function]}
            handleReset={[Function]}
            handleSubmit={[Function]}
            initialValues={
              Object {
                "description": "",
                "end": 2018-08-07T12:34:56.000Z,
                "location": "",
                "start": 2018-08-07T12:34:56.000Z,
                "summary": "",
              }
            }
            isSubmitting={false}
            isValid={false}
            isValidating={false}
            onHide={[Function]}
            open={false}
            registerField={[Function]}
            resetForm={[Function]}
            setError={[Function]}
            setErrors={[Function]}
            setFieldError={[Function]}
            setFieldTouched={[Function]}
            setFieldValue={[Function]}
            setFormikState={[Function]}
            setStatus={[Function]}
            setSubmitting={[Function]}
            setTouched={[Function]}
            setValues={[Function]}
            submitCount={0}
            submitForm={[Function]}
            touched={Object {}}
            unregisterField={[Function]}
            validateField={[Function]}
            validateForm={[Function]}
            validateOnBlur={true}
            validateOnChange={true}
            values={
              Object {
                "description": "",
                "end": 2018-08-07T12:34:56.000Z,
                "location": "",
                "start": 2018-08-07T12:34:56.000Z,
                "summary": "",
              }
            }
          >
            <Mutation
              ignoreResults={true}
              mutation={
                Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "insert",
                      },
                      "operation": "mutation",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "kind": "Argument",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "summary",
                                },
                                "value": Object {
                                  "kind": "Variable",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "summary",
                                  },
                                },
                              },
                              Object {
                                "kind": "Argument",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "description",
                                },
                                "value": Object {
                                  "kind": "Variable",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "description",
                                  },
                                },
                              },
                              Object {
                                "kind": "Argument",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "location",
                                },
                                "value": Object {
                                  "kind": "Variable",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "location",
                                  },
                                },
                              },
                              Object {
                                "kind": "Argument",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "start",
                                },
                                "value": Object {
                                  "fields": Array [
                                    Object {
                                      "kind": "ObjectField",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "dateTime",
                                      },
                                      "value": Object {
                                        "kind": "Variable",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "start",
                                        },
                                      },
                                    },
                                  ],
                                  "kind": "ObjectValue",
                                },
                              },
                              Object {
                                "kind": "Argument",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "end",
                                },
                                "value": Object {
                                  "fields": Array [
                                    Object {
                                      "kind": "ObjectField",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "dateTime",
                                      },
                                      "value": Object {
                                        "kind": "Variable",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "end",
                                        },
                                      },
                                    },
                                  ],
                                  "kind": "ObjectValue",
                                },
                              },
                            ],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "insert",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "directives": Array [],
                                  "kind": "FragmentSpread",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "EventListFragment",
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [
                        Object {
                          "kind": "VariableDefinition",
                          "type": Object {
                            "kind": "NonNullType",
                            "type": Object {
                              "kind": "NamedType",
                              "name": Object {
                                "kind": "Name",
                                "value": "String",
                              },
                            },
                          },
                          "variable": Object {
                            "kind": "Variable",
                            "name": Object {
                              "kind": "Name",
                              "value": "summary",
                            },
                          },
                        },
                        Object {
                          "kind": "VariableDefinition",
                          "type": Object {
                            "kind": "NamedType",
                            "name": Object {
                              "kind": "Name",
                              "value": "String",
                            },
                          },
                          "variable": Object {
                            "kind": "Variable",
                            "name": Object {
                              "kind": "Name",
                              "value": "description",
                            },
                          },
                        },
                        Object {
                          "kind": "VariableDefinition",
                          "type": Object {
                            "kind": "NonNullType",
                            "type": Object {
                              "kind": "NamedType",
                              "name": Object {
                                "kind": "Name",
                                "value": "String",
                              },
                            },
                          },
                          "variable": Object {
                            "kind": "Variable",
                            "name": Object {
                              "kind": "Name",
                              "value": "location",
                            },
                          },
                        },
                        Object {
                          "kind": "VariableDefinition",
                          "type": Object {
                            "kind": "NonNullType",
                            "type": Object {
                              "kind": "NamedType",
                              "name": Object {
                                "kind": "Name",
                                "value": "String",
                              },
                            },
                          },
                          "variable": Object {
                            "kind": "Variable",
                            "name": Object {
                              "kind": "Name",
                              "value": "start",
                            },
                          },
                        },
                        Object {
                          "kind": "VariableDefinition",
                          "type": Object {
                            "kind": "NonNullType",
                            "type": Object {
                              "kind": "NamedType",
                              "name": Object {
                                "kind": "Name",
                                "value": "String",
                              },
                            },
                          },
                          "variable": Object {
                            "kind": "Variable",
                            "name": Object {
                              "kind": "Name",
                              "value": "end",
                            },
                          },
                        },
                      ],
                    },
                    Object {
                      "directives": Array [],
                      "kind": "FragmentDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "EventListFragment",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "id",
                            },
                          },
                          Object {
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "summary",
                            },
                          },
                          Object {
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "location",
                            },
                          },
                        ],
                      },
                      "typeCondition": Object {
                        "kind": "NamedType",
                        "name": Object {
                          "kind": "Name",
                          "value": "Event",
                        },
                      },
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 340,
                    "source": Object {
                      "body": "
  mutation insert(
    $summary: String!
    $description: String
    $location: String!
    $start: String!
    $end: String!
  ) {
    insert(
      summary: $summary
      description: $description
      location: $location
      start: { dateTime: $start }
      end: { dateTime: $end }
    ) {
      ...EventListFragment
    }
  }
  
",
                      "locationOffset": Object {
                        "column": 1,
                        "line": 1,
                      },
                      "name": "GraphQL request",
                    },
                    "start": 0,
                  },
                }
              }
            >
              <updateEvent(PureEventForm)
                dirty={false}
                errors={Object {}}
                handleBlur={[Function]}
                handleChange={[Function]}
                handleReset={[Function]}
                handleSubmit={[Function]}
                initialValues={
                  Object {
                    "description": "",
                    "end": 2018-08-07T12:34:56.000Z,
                    "location": "",
                    "start": 2018-08-07T12:34:56.000Z,
                    "summary": "",
                  }
                }
                insertEvent={[Function]}
                isSubmitting={false}
                isValid={false}
                isValidating={false}
                onHide={[Function]}
                open={false}
                registerField={[Function]}
                resetForm={[Function]}
                setError={[Function]}
                setErrors={[Function]}
                setFieldError={[Function]}
                setFieldTouched={[Function]}
                setFieldValue={[Function]}
                setFormikState={[Function]}
                setStatus={[Function]}
                setSubmitting={[Function]}
                setTouched={[Function]}
                setValues={[Function]}
                submitCount={0}
                submitForm={[Function]}
                touched={Object {}}
                unregisterField={[Function]}
                validateField={[Function]}
                validateForm={[Function]}
                validateOnBlur={true}
                validateOnChange={true}
                values={
                  Object {
                    "description": "",
                    "end": 2018-08-07T12:34:56.000Z,
                    "location": "",
                    "start": 2018-08-07T12:34:56.000Z,
                    "summary": "",
                  }
                }
              >
                <Mutation
                  ignoreResults={true}
                  mutation={
                    Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "update",
                          },
                          "operation": "mutation",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "arguments": Array [
                                  Object {
                                    "kind": "Argument",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "eventId",
                                    },
                                    "value": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "eventId",
                                      },
                                    },
                                  },
                                  Object {
                                    "kind": "Argument",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "summary",
                                    },
                                    "value": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "summary",
                                      },
                                    },
                                  },
                                  Object {
                                    "kind": "Argument",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "description",
                                    },
                                    "value": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "description",
                                      },
                                    },
                                  },
                                  Object {
                                    "kind": "Argument",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "location",
                                    },
                                    "value": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "location",
                                      },
                                    },
                                  },
                                  Object {
                                    "kind": "Argument",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "start",
                                    },
                                    "value": Object {
                                      "fields": Array [
                                        Object {
                                          "kind": "ObjectField",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "dateTime",
                                          },
                                          "value": Object {
                                            "kind": "Variable",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "start",
                                            },
                                          },
                                        },
                                      ],
                                      "kind": "ObjectValue",
                                    },
                                  },
                                  Object {
                                    "kind": "Argument",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "end",
                                    },
                                    "value": Object {
                                      "fields": Array [
                                        Object {
                                          "kind": "ObjectField",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "dateTime",
                                          },
                                          "value": Object {
                                            "kind": "Variable",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "end",
                                            },
                                          },
                                        },
                                      ],
                                      "kind": "ObjectValue",
                                    },
                                  },
                                ],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "update",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "directives": Array [],
                                      "kind": "FragmentSpread",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "EventDetailFragment",
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [
                            Object {
                              "kind": "VariableDefinition",
                              "type": Object {
                                "kind": "NonNullType",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "ID",
                                  },
                                },
                              },
                              "variable": Object {
                                "kind": "Variable",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "eventId",
                                },
                              },
                            },
                            Object {
                              "kind": "VariableDefinition",
                              "type": Object {
                                "kind": "NonNullType",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "String",
                                  },
                                },
                              },
                              "variable": Object {
                                "kind": "Variable",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "summary",
                                },
                              },
                            },
                            Object {
                              "kind": "VariableDefinition",
                              "type": Object {
                                "kind": "NamedType",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "String",
                                },
                              },
                              "variable": Object {
                                "kind": "Variable",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "description",
                                },
                              },
                            },
                            Object {
                              "kind": "VariableDefinition",
                              "type": Object {
                                "kind": "NonNullType",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "String",
                                  },
                                },
                              },
                              "variable": Object {
                                "kind": "Variable",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "location",
                                },
                              },
                            },
                            Object {
                              "kind": "VariableDefinition",
                              "type": Object {
                                "kind": "NonNullType",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "String",
                                  },
                                },
                              },
                              "variable": Object {
                                "kind": "Variable",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "start",
                                },
                              },
                            },
                            Object {
                              "kind": "VariableDefinition",
                              "type": Object {
                                "kind": "NonNullType",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "String",
                                  },
                                },
                              },
                              "variable": Object {
                                "kind": "Variable",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "end",
                                },
                              },
                            },
                          ],
                        },
                        Object {
                          "directives": Array [],
                          "kind": "FragmentDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "EventDetailFragment",
                          },
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "id",
                                },
                              },
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "summary",
                                },
                              },
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "location",
                                },
                              },
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "htmlLink",
                                },
                              },
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "description",
                                },
                              },
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "start",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "dateTime",
                                      },
                                    },
                                  ],
                                },
                              },
                              Object {
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "end",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "dateTime",
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "typeCondition": Object {
                            "kind": "NamedType",
                            "name": Object {
                              "kind": "Name",
                              "value": "Event",
                            },
                          },
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 384,
                        "source": Object {
                          "body": "
  mutation update(
    $eventId: ID!
    $summary: String!
    $description: String
    $location: String!
    $start: String!
    $end: String!
  ) {
    update(
      eventId: $eventId
      summary: $summary
      description: $description
      location: $location
      start: { dateTime: $start }
      end: { dateTime: $end }
    ) {
      ...EventDetailFragment
    }
  }
  
",
                          "locationOffset": Object {
                            "column": 1,
                            "line": 1,
                          },
                          "name": "GraphQL request",
                        },
                        "start": 0,
                      },
                    }
                  }
                >
                  <PureEventForm
                    dirty={false}
                    errors={Object {}}
                    handleBlur={[Function]}
                    handleChange={[Function]}
                    handleReset={[Function]}
                    handleSubmit={[Function]}
                    initialValues={
                      Object {
                        "description": "",
                        "end": 2018-08-07T12:34:56.000Z,
                        "location": "",
                        "start": 2018-08-07T12:34:56.000Z,
                        "summary": "",
                      }
                    }
                    insertEvent={[Function]}
                    isSubmitting={false}
                    isValid={false}
                    isValidating={false}
                    onHide={[Function]}
                    open={false}
                    registerField={[Function]}
                    resetForm={[Function]}
                    setError={[Function]}
                    setErrors={[Function]}
                    setFieldError={[Function]}
                    setFieldTouched={[Function]}
                    setFieldValue={[Function]}
                    setFormikState={[Function]}
                    setStatus={[Function]}
                    setSubmitting={[Function]}
                    setTouched={[Function]}
                    setValues={[Function]}
                    submitCount={0}
                    submitForm={[Function]}
                    touched={Object {}}
                    unregisterField={[Function]}
                    updateEvent={[Function]}
                    validateField={[Function]}
                    validateForm={[Function]}
                    validateOnBlur={true}
                    validateOnChange={true}
                    values={
                      Object {
                        "description": "",
                        "end": 2018-08-07T12:34:56.000Z,
                        "location": "",
                        "start": 2018-08-07T12:34:56.000Z,
                        "summary": "",
                      }
                    }
                  >
                    <WithStyles(Dialog)
                      TransitionComponent={[Function]}
                      aria-describedby="event-form-slide-description"
                      aria-labelledby="event-form-slide-title"
                      fullWidth={true}
                      keepMounted={true}
                      onClose={[Function]}
                      open={false}
                    >
                      <Dialog
                        TransitionComponent={[Function]}
                        aria-describedby="event-form-slide-description"
                        aria-labelledby="event-form-slide-title"
                        classes={
                          Object {
                            "paper": "MuiDialog-paper-4",
                            "paperFullScreen": "MuiDialog-paperFullScreen-11",
                            "paperFullWidth": "MuiDialog-paperFullWidth-10",
                            "paperScrollBody": "MuiDialog-paperScrollBody-6",
                            "paperScrollPaper": "MuiDialog-paperScrollPaper-5",
                            "paperWidthMd": "MuiDialog-paperWidthMd-9",
                            "paperWidthSm": "MuiDialog-paperWidthSm-8",
                            "paperWidthXs": "MuiDialog-paperWidthXs-7",
                            "root": "MuiDialog-root-1",
                            "scrollBody": "MuiDialog-scrollBody-3",
                            "scrollPaper": "MuiDialog-scrollPaper-2",
                          }
                        }
                        disableBackdropClick={false}
                        disableEscapeKeyDown={false}
                        fullScreen={false}
                        fullWidth={true}
                        keepMounted={true}
                        maxWidth="sm"
                        onClose={[Function]}
                        open={false}
                        scroll="paper"
                        transitionDuration={
                          Object {
                            "enter": 225,
                            "exit": 195,
                          }
                        }
                      >
                        <WithStyles(Modal)
                          BackdropProps={
                            Object {
                              "transitionDuration": Object {
                                "enter": 225,
                                "exit": 195,
                              },
                            }
                          }
                          aria-describedby="event-form-slide-description"
                          aria-labelledby="event-form-slide-title"
                          className="MuiDialog-root-1 MuiDialog-scrollPaper-2"
                          disableBackdropClick={false}
                          disableEscapeKeyDown={false}
                          keepMounted={true}
                          onClose={[Function]}
                          open={false}
                          role="dialog"
                        >
                          <Modal
                            BackdropComponent={[Function]}
                            BackdropProps={
                              Object {
                                "transitionDuration": Object {
                                  "enter": 225,
                                  "exit": 195,
                                },
                              }
                            }
                            aria-describedby="event-form-slide-description"
                            aria-labelledby="event-form-slide-title"
                            className="MuiDialog-root-1 MuiDialog-scrollPaper-2"
                            classes={
                              Object {
                                "hidden": "MuiModal-hidden-13",
                                "root": "MuiModal-root-12",
                              }
                            }
                            disableAutoFocus={false}
                            disableBackdropClick={false}
                            disableEnforceFocus={false}
                            disableEscapeKeyDown={false}
                            disablePortal={false}
                            disableRestoreFocus={false}
                            hideBackdrop={false}
                            keepMounted={true}
                            manager={
                              ModalManager {
                                "containers": Array [],
                                "data": Array [],
                                "handleContainerOverflow": true,
                                "hideSiblingNodes": true,
                                "modals": Array [],
                              }
                            }
                            onClose={[Function]}
                            open={false}
                            role="dialog"
                          >
                            <Portal
                              disablePortal={false}
                              onRendered={[Function]}
                            >
                              <div
                                aria-describedby="event-form-slide-description"
                                aria-labelledby="event-form-slide-title"
                                className="MuiModal-root-12 MuiDialog-root-1 MuiDialog-scrollPaper-2 MuiModal-hidden-13"
                                role="dialog"
                              >
                                <WithStyles(Backdrop)
                                  onClick={[Function]}
                                  open={false}
                                  transitionDuration={
                                    Object {
                                      "enter": 225,
                                      "exit": 195,
                                    }
                                  }
                                >
                                  <Backdrop
                                    classes={
                                      Object {
                                        "invisible": "MuiBackdrop-invisible-15",
                                        "root": "MuiBackdrop-root-14",
                                      }
                                    }
                                    invisible={false}
                                    onClick={[Function]}
                                    open={false}
                                    transitionDuration={
                                      Object {
                                        "enter": 225,
                                        "exit": 195,
                                      }
                                    }
                                  >
                                    <WithTheme(Fade)
                                      appear={true}
                                      in={false}
                                      onClick={[Function]}
                                      timeout={
                                        Object {
                                          "enter": 225,
                                          "exit": 195,
                                        }
                                      }
                                    >
                                      <Fade
                                        appear={true}
                                        in={false}
                                        onClick={[Function]}
                                        theme={
                                          Object {
                                            "breakpoints": Object {
                                              "between": [Function],
                                              "down": [Function],
                                              "keys": Array [
                                                "xs",
                                                "sm",
                                                "md",
                                                "lg",
                                                "xl",
                                              ],
                                              "only": [Function],
                                              "up": [Function],
                                              "values": Object {
                                                "lg": 1280,
                                                "md": 960,
                                                "sm": 600,
                                                "xl": 1920,
                                                "xs": 0,
                                              },
                                              "width": [Function],
                                            },
                                            "direction": "ltr",
                                            "mixins": Object {
                                              "gutters": [Function],
                                              "toolbar": Object {
                                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                                  "minHeight": 48,
                                                },
                                                "@media (min-width:600px)": Object {
                                                  "minHeight": 64,
                                                },
                                                "minHeight": 56,
                                              },
                                            },
                                            "overrides": Object {},
                                            "palette": Object {
                                              "action": Object {
                                                "active": "rgba(0, 0, 0, 0.54)",
                                                "disabled": "rgba(0, 0, 0, 0.26)",
                                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                "hover": "rgba(0, 0, 0, 0.08)",
                                                "hoverOpacity": 0.08,
                                                "selected": "rgba(0, 0, 0, 0.14)",
                                              },
                                              "augmentColor": [Function],
                                              "background": Object {
                                                "default": "#fafafa",
                                                "paper": "#fff",
                                              },
                                              "common": Object {
                                                "black": "#000",
                                                "white": "#fff",
                                              },
                                              "contrastThreshold": 3,
                                              "divider": "rgba(0, 0, 0, 0.12)",
                                              "error": Object {
                                                "contrastText": "#fff",
                                                "dark": "#d32f2f",
                                                "light": "#e57373",
                                                "main": "#f44336",
                                              },
                                              "getContrastText": [Function],
                                              "grey": Object {
                                                "100": "#f5f5f5",
                                                "200": "#eeeeee",
                                                "300": "#e0e0e0",
                                                "400": "#bdbdbd",
                                                "50": "#fafafa",
                                                "500": "#9e9e9e",
                                                "600": "#757575",
                                                "700": "#616161",
                                                "800": "#424242",
                                                "900": "#212121",
                                                "A100": "#d5d5d5",
                                                "A200": "#aaaaaa",
                                                "A400": "#303030",
                                                "A700": "#616161",
                                              },
                                              "primary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#303f9f",
                                                "light": "#7986cb",
                                                "main": "#3f51b5",
                                              },
                                              "secondary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#c51162",
                                                "light": "#ff4081",
                                                "main": "#f50057",
                                              },
                                              "text": Object {
                                                "disabled": "rgba(0, 0, 0, 0.38)",
                                                "hint": "rgba(0, 0, 0, 0.38)",
                                                "primary": "rgba(0, 0, 0, 0.87)",
                                                "secondary": "rgba(0, 0, 0, 0.54)",
                                              },
                                              "tonalOffset": 0.2,
                                              "type": "light",
                                            },
                                            "props": Object {},
                                            "shadows": Array [
                                              "none",
                                              "0px 1px 3px 0px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 2px 1px -1px rgba(0, 0, 0, 0.12)",
                                              "0px 1px 5px 0px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 3px 1px -2px rgba(0, 0, 0, 0.12)",
                                              "0px 1px 8px 0px rgba(0, 0, 0, 0.2),0px 3px 4px 0px rgba(0, 0, 0, 0.14),0px 3px 3px -2px rgba(0, 0, 0, 0.12)",
                                              "0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0, 0, 0, 0.12)",
                                              "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 5px 8px 0px rgba(0, 0, 0, 0.14),0px 1px 14px 0px rgba(0, 0, 0, 0.12)",
                                              "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0, 0, 0, 0.12)",
                                              "0px 4px 5px -2px rgba(0, 0, 0, 0.2),0px 7px 10px 1px rgba(0, 0, 0, 0.14),0px 2px 16px 1px rgba(0, 0, 0, 0.12)",
                                              "0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0, 0, 0, 0.12)",
                                              "0px 5px 6px -3px rgba(0, 0, 0, 0.2),0px 9px 12px 1px rgba(0, 0, 0, 0.14),0px 3px 16px 2px rgba(0, 0, 0, 0.12)",
                                              "0px 6px 6px -3px rgba(0, 0, 0, 0.2),0px 10px 14px 1px rgba(0, 0, 0, 0.14),0px 4px 18px 3px rgba(0, 0, 0, 0.12)",
                                              "0px 6px 7px -4px rgba(0, 0, 0, 0.2),0px 11px 15px 1px rgba(0, 0, 0, 0.14),0px 4px 20px 3px rgba(0, 0, 0, 0.12)",
                                              "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0, 0, 0, 0.12)",
                                              "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 13px 19px 2px rgba(0, 0, 0, 0.14),0px 5px 24px 4px rgba(0, 0, 0, 0.12)",
                                              "0px 7px 9px -4px rgba(0, 0, 0, 0.2),0px 14px 21px 2px rgba(0, 0, 0, 0.14),0px 5px 26px 4px rgba(0, 0, 0, 0.12)",
                                              "0px 8px 9px -5px rgba(0, 0, 0, 0.2),0px 15px 22px 2px rgba(0, 0, 0, 0.14),0px 6px 28px 5px rgba(0, 0, 0, 0.12)",
                                              "0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0, 0, 0, 0.12)",
                                              "0px 8px 11px -5px rgba(0, 0, 0, 0.2),0px 17px 26px 2px rgba(0, 0, 0, 0.14),0px 6px 32px 5px rgba(0, 0, 0, 0.12)",
                                              "0px 9px 11px -5px rgba(0, 0, 0, 0.2),0px 18px 28px 2px rgba(0, 0, 0, 0.14),0px 7px 34px 6px rgba(0, 0, 0, 0.12)",
                                              "0px 9px 12px -6px rgba(0, 0, 0, 0.2),0px 19px 29px 2px rgba(0, 0, 0, 0.14),0px 7px 36px 6px rgba(0, 0, 0, 0.12)",
                                              "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)",
                                              "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 21px 33px 3px rgba(0, 0, 0, 0.14),0px 8px 40px 7px rgba(0, 0, 0, 0.12)",
                                              "0px 10px 14px -6px rgba(0, 0, 0, 0.2),0px 22px 35px 3px rgba(0, 0, 0, 0.14),0px 8px 42px 7px rgba(0, 0, 0, 0.12)",
                                              "0px 11px 14px -7px rgba(0, 0, 0, 0.2),0px 23px 36px 3px rgba(0, 0, 0, 0.14),0px 9px 44px 8px rgba(0, 0, 0, 0.12)",
                                              "0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0, 0, 0, 0.12)",
                                            ],
                                            "shape": Object {
                                              "borderRadius": 4,
                                            },
                                            "spacing": Object {
                                              "unit": 8,
                                            },
                                            "transitions": Object {
                                              "create": [Function],
                                              "duration": Object {
                                                "complex": 375,
                                                "enteringScreen": 225,
                                                "leavingScreen": 195,
                                                "short": 250,
                                                "shorter": 200,
                                                "shortest": 150,
                                                "standard": 300,
                                              },
                                              "easing": Object {
                                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                              },
                                              "getAutoHeightDuration": [Function],
                                            },
                                            "typography": Object {
                                              "body1": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.46429em",
                                              },
                                              "body2": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "lineHeight": "1.71429em",
                                              },
                                              "button": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "textTransform": "uppercase",
                                              },
                                              "caption": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.375em",
                                              },
                                              "display1": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "2.125rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.20588em",
                                              },
                                              "display2": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "2.8125rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.13333em",
                                                "marginLeft": "-.02em",
                                              },
                                              "display3": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3.5rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "-.02em",
                                                "lineHeight": "1.30357em",
                                                "marginLeft": "-.02em",
                                              },
                                              "display4": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "7rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-.04em",
                                                "lineHeight": "1.14286em",
                                                "marginLeft": "-.04em",
                                              },
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": 14,
                                              "fontWeightLight": 300,
                                              "fontWeightMedium": 500,
                                              "fontWeightRegular": 400,
                                              "headline": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.5rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.35417em",
                                              },
                                              "pxToRem": [Function],
                                              "round": [Function],
                                              "subheading": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.5em",
                                              },
                                              "title": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.3125rem",
                                                "fontWeight": 500,
                                                "lineHeight": "1.16667em",
                                              },
                                            },
                                            "zIndex": Object {
                                              "appBar": 1100,
                                              "drawer": 1200,
                                              "mobileStepper": 1000,
                                              "modal": 1300,
                                              "snackbar": 1400,
                                              "tooltip": 1500,
                                            },
                                          }
                                        }
                                        timeout={
                                          Object {
                                            "enter": 225,
                                            "exit": 195,
                                          }
                                        }
                                      >
                                        <Transition
                                          appear={true}
                                          enter={true}
                                          exit={true}
                                          in={false}
                                          mountOnEnter={false}
                                          onClick={[Function]}
                                          onEnter={[Function]}
                                          onEntered={[Function]}
                                          onEntering={[Function]}
                                          onExit={[Function]}
                                          onExited={[Function]}
                                          onExiting={[Function]}
                                          timeout={
                                            Object {
                                              "enter": 225,
                                              "exit": 195,
                                            }
                                          }
                                          unmountOnExit={false}
                                        >
                                          <div
                                            aria-hidden="true"
                                            className="MuiBackdrop-root-14"
                                            onClick={[Function]}
                                            style={
                                              Object {
                                                "opacity": 0,
                                                "willChange": "opacity",
                                              }
                                            }
                                          />
                                        </Transition>
                                      </Fade>
                                    </WithTheme(Fade)>
                                  </Backdrop>
                                </WithStyles(Backdrop)>
                                <RootRef
                                  rootRef={[Function]}
                                >
                                  <Transition
                                    appear={true}
                                    in={false}
                                    onExited={[Function]}
                                    role="document"
                                    tabIndex="-1"
                                    timeout={
                                      Object {
                                        "enter": 225,
                                        "exit": 195,
                                      }
                                    }
                                  >
                                    <WithTheme(Slide)
                                      appear={true}
                                      direction="up"
                                      in={false}
                                      onExited={[Function]}
                                      role="document"
                                      tabIndex="-1"
                                      timeout={
                                        Object {
                                          "enter": 225,
                                          "exit": 195,
                                        }
                                      }
                                    >
                                      <Slide
                                        appear={true}
                                        direction="up"
                                        in={false}
                                        onExited={[Function]}
                                        role="document"
                                        tabIndex="-1"
                                        theme={
                                          Object {
                                            "breakpoints": Object {
                                              "between": [Function],
                                              "down": [Function],
                                              "keys": Array [
                                                "xs",
                                                "sm",
                                                "md",
                                                "lg",
                                                "xl",
                                              ],
                                              "only": [Function],
                                              "up": [Function],
                                              "values": Object {
                                                "lg": 1280,
                                                "md": 960,
                                                "sm": 600,
                                                "xl": 1920,
                                                "xs": 0,
                                              },
                                              "width": [Function],
                                            },
                                            "direction": "ltr",
                                            "mixins": Object {
                                              "gutters": [Function],
                                              "toolbar": Object {
                                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                                  "minHeight": 48,
                                                },
                                                "@media (min-width:600px)": Object {
                                                  "minHeight": 64,
                                                },
                                                "minHeight": 56,
                                              },
                                            },
                                            "overrides": Object {},
                                            "palette": Object {
                                              "action": Object {
                                                "active": "rgba(0, 0, 0, 0.54)",
                                                "disabled": "rgba(0, 0, 0, 0.26)",
                                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                "hover": "rgba(0, 0, 0, 0.08)",
                                                "hoverOpacity": 0.08,
                                                "selected": "rgba(0, 0, 0, 0.14)",
                                              },
                                              "augmentColor": [Function],
                                              "background": Object {
                                                "default": "#fafafa",
                                                "paper": "#fff",
                                              },
                                              "common": Object {
                                                "black": "#000",
                                                "white": "#fff",
                                              },
                                              "contrastThreshold": 3,
                                              "divider": "rgba(0, 0, 0, 0.12)",
                                              "error": Object {
                                                "contrastText": "#fff",
                                                "dark": "#d32f2f",
                                                "light": "#e57373",
                                                "main": "#f44336",
                                              },
                                              "getContrastText": [Function],
                                              "grey": Object {
                                                "100": "#f5f5f5",
                                                "200": "#eeeeee",
                                                "300": "#e0e0e0",
                                                "400": "#bdbdbd",
                                                "50": "#fafafa",
                                                "500": "#9e9e9e",
                                                "600": "#757575",
                                                "700": "#616161",
                                                "800": "#424242",
                                                "900": "#212121",
                                                "A100": "#d5d5d5",
                                                "A200": "#aaaaaa",
                                                "A400": "#303030",
                                                "A700": "#616161",
                                              },
                                              "primary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#303f9f",
                                                "light": "#7986cb",
                                                "main": "#3f51b5",
                                              },
                                              "secondary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#c51162",
                                                "light": "#ff4081",
                                                "main": "#f50057",
                                              },
                                              "text": Object {
                                                "disabled": "rgba(0, 0, 0, 0.38)",
                                                "hint": "rgba(0, 0, 0, 0.38)",
                                                "primary": "rgba(0, 0, 0, 0.87)",
                                                "secondary": "rgba(0, 0, 0, 0.54)",
                                              },
                                              "tonalOffset": 0.2,
                                              "type": "light",
                                            },
                                            "props": Object {},
                                            "shadows": Array [
                                              "none",
                                              "0px 1px 3px 0px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 2px 1px -1px rgba(0, 0, 0, 0.12)",
                                              "0px 1px 5px 0px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 3px 1px -2px rgba(0, 0, 0, 0.12)",
                                              "0px 1px 8px 0px rgba(0, 0, 0, 0.2),0px 3px 4px 0px rgba(0, 0, 0, 0.14),0px 3px 3px -2px rgba(0, 0, 0, 0.12)",
                                              "0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0, 0, 0, 0.12)",
                                              "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 5px 8px 0px rgba(0, 0, 0, 0.14),0px 1px 14px 0px rgba(0, 0, 0, 0.12)",
                                              "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0, 0, 0, 0.12)",
                                              "0px 4px 5px -2px rgba(0, 0, 0, 0.2),0px 7px 10px 1px rgba(0, 0, 0, 0.14),0px 2px 16px 1px rgba(0, 0, 0, 0.12)",
                                              "0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0, 0, 0, 0.12)",
                                              "0px 5px 6px -3px rgba(0, 0, 0, 0.2),0px 9px 12px 1px rgba(0, 0, 0, 0.14),0px 3px 16px 2px rgba(0, 0, 0, 0.12)",
                                              "0px 6px 6px -3px rgba(0, 0, 0, 0.2),0px 10px 14px 1px rgba(0, 0, 0, 0.14),0px 4px 18px 3px rgba(0, 0, 0, 0.12)",
                                              "0px 6px 7px -4px rgba(0, 0, 0, 0.2),0px 11px 15px 1px rgba(0, 0, 0, 0.14),0px 4px 20px 3px rgba(0, 0, 0, 0.12)",
                                              "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0, 0, 0, 0.12)",
                                              "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 13px 19px 2px rgba(0, 0, 0, 0.14),0px 5px 24px 4px rgba(0, 0, 0, 0.12)",
                                              "0px 7px 9px -4px rgba(0, 0, 0, 0.2),0px 14px 21px 2px rgba(0, 0, 0, 0.14),0px 5px 26px 4px rgba(0, 0, 0, 0.12)",
                                              "0px 8px 9px -5px rgba(0, 0, 0, 0.2),0px 15px 22px 2px rgba(0, 0, 0, 0.14),0px 6px 28px 5px rgba(0, 0, 0, 0.12)",
                                              "0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0, 0, 0, 0.12)",
                                              "0px 8px 11px -5px rgba(0, 0, 0, 0.2),0px 17px 26px 2px rgba(0, 0, 0, 0.14),0px 6px 32px 5px rgba(0, 0, 0, 0.12)",
                                              "0px 9px 11px -5px rgba(0, 0, 0, 0.2),0px 18px 28px 2px rgba(0, 0, 0, 0.14),0px 7px 34px 6px rgba(0, 0, 0, 0.12)",
                                              "0px 9px 12px -6px rgba(0, 0, 0, 0.2),0px 19px 29px 2px rgba(0, 0, 0, 0.14),0px 7px 36px 6px rgba(0, 0, 0, 0.12)",
                                              "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)",
                                              "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 21px 33px 3px rgba(0, 0, 0, 0.14),0px 8px 40px 7px rgba(0, 0, 0, 0.12)",
                                              "0px 10px 14px -6px rgba(0, 0, 0, 0.2),0px 22px 35px 3px rgba(0, 0, 0, 0.14),0px 8px 42px 7px rgba(0, 0, 0, 0.12)",
                                              "0px 11px 14px -7px rgba(0, 0, 0, 0.2),0px 23px 36px 3px rgba(0, 0, 0, 0.14),0px 9px 44px 8px rgba(0, 0, 0, 0.12)",
                                              "0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0, 0, 0, 0.12)",
                                            ],
                                            "shape": Object {
                                              "borderRadius": 4,
                                            },
                                            "spacing": Object {
                                              "unit": 8,
                                            },
                                            "transitions": Object {
                                              "create": [Function],
                                              "duration": Object {
                                                "complex": 375,
                                                "enteringScreen": 225,
                                                "leavingScreen": 195,
                                                "short": 250,
                                                "shorter": 200,
                                                "shortest": 150,
                                                "standard": 300,
                                              },
                                              "easing": Object {
                                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                              },
                                              "getAutoHeightDuration": [Function],
                                            },
                                            "typography": Object {
                                              "body1": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.46429em",
                                              },
                                              "body2": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "lineHeight": "1.71429em",
                                              },
                                              "button": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 500,
                                                "textTransform": "uppercase",
                                              },
                                              "caption": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.375em",
                                              },
                                              "display1": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "2.125rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.20588em",
                                              },
                                              "display2": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "2.8125rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.13333em",
                                                "marginLeft": "-.02em",
                                              },
                                              "display3": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3.5rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "-.02em",
                                                "lineHeight": "1.30357em",
                                                "marginLeft": "-.02em",
                                              },
                                              "display4": Object {
                                                "color": "rgba(0, 0, 0, 0.54)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "7rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "-.04em",
                                                "lineHeight": "1.14286em",
                                                "marginLeft": "-.04em",
                                              },
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": 14,
                                              "fontWeightLight": 300,
                                              "fontWeightMedium": 500,
                                              "fontWeightRegular": 400,
                                              "headline": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.5rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.35417em",
                                              },
                                              "pxToRem": [Function],
                                              "round": [Function],
                                              "subheading": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 400,
                                                "lineHeight": "1.5em",
                                              },
                                              "title": Object {
                                                "color": "rgba(0, 0, 0, 0.87)",
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.3125rem",
                                                "fontWeight": 500,
                                                "lineHeight": "1.16667em",
                                              },
                                            },
                                            "zIndex": Object {
                                              "appBar": 1100,
                                              "drawer": 1200,
                                              "mobileStepper": 1000,
                                              "modal": 1300,
                                              "snackbar": 1400,
                                              "tooltip": 1500,
                                            },
                                          }
                                        }
                                        timeout={
                                          Object {
                                            "enter": 225,
                                            "exit": 195,
                                          }
                                        }
                                      >
                                        <EventListener
                                          onResize={[Function]}
                                          target="window"
                                        >
                                          <Transition
                                            appear={true}
                                            direction="up"
                                            enter={true}
                                            exit={true}
                                            in={false}
                                            mountOnEnter={false}
                                            onEnter={[Function]}
                                            onEntered={[Function]}
                                            onEntering={[Function]}
                                            onExit={[Function]}
                                            onExited={[Function]}
                                            onExiting={[Function]}
                                            role="document"
                                            style={
                                              Object {
                                                "visibility": "hidden",
                                              }
                                            }
                                            tabIndex="-1"
                                            timeout={
                                              Object {
                                                "enter": 225,
                                                "exit": 195,
                                              }
                                            }
                                            unmountOnExit={false}
                                          >
                                            <WithStyles(Paper)
                                              className="MuiDialog-paper-4 MuiDialog-paperScrollPaper-5 MuiDialog-paperWidthSm-8 MuiDialog-paperFullWidth-10"
                                              direction="up"
                                              elevation={24}
                                              role="document"
                                              style={
                                                Object {
                                                  "visibility": "hidden",
                                                }
                                              }
                                              tabIndex="-1"
                                            >
                                              <Paper
                                                className="MuiDialog-paper-4 MuiDialog-paperScrollPaper-5 MuiDialog-paperWidthSm-8 MuiDialog-paperFullWidth-10"
                                                classes={
                                                  Object {
                                                    "elevation0": "MuiPaper-elevation0-18",
                                                    "elevation1": "MuiPaper-elevation1-19",
                                                    "elevation10": "MuiPaper-elevation10-28",
                                                    "elevation11": "MuiPaper-elevation11-29",
                                                    "elevation12": "MuiPaper-elevation12-30",
                                                    "elevation13": "MuiPaper-elevation13-31",
                                                    "elevation14": "MuiPaper-elevation14-32",
                                                    "elevation15": "MuiPaper-elevation15-33",
                                                    "elevation16": "MuiPaper-elevation16-34",
                                                    "elevation17": "MuiPaper-elevation17-35",
                                                    "elevation18": "MuiPaper-elevation18-36",
                                                    "elevation19": "MuiPaper-elevation19-37",
                                                    "elevation2": "MuiPaper-elevation2-20",
                                                    "elevation20": "MuiPaper-elevation20-38",
                                                    "elevation21": "MuiPaper-elevation21-39",
                                                    "elevation22": "MuiPaper-elevation22-40",
                                                    "elevation23": "MuiPaper-elevation23-41",
                                                    "elevation24": "MuiPaper-elevation24-42",
                                                    "elevation3": "MuiPaper-elevation3-21",
                                                    "elevation4": "MuiPaper-elevation4-22",
                                                    "elevation5": "MuiPaper-elevation5-23",
                                                    "elevation6": "MuiPaper-elevation6-24",
                                                    "elevation7": "MuiPaper-elevation7-25",
                                                    "elevation8": "MuiPaper-elevation8-26",
                                                    "elevation9": "MuiPaper-elevation9-27",
                                                    "root": "MuiPaper-root-16",
                                                    "rounded": "MuiPaper-rounded-17",
                                                  }
                                                }
                                                component="div"
                                                direction="up"
                                                elevation={24}
                                                role="document"
                                                square={false}
                                                style={
                                                  Object {
                                                    "visibility": "hidden",
                                                  }
                                                }
                                                tabIndex="-1"
                                              >
                                                <div
                                                  className="MuiPaper-root-16 MuiPaper-elevation24-42 MuiPaper-rounded-17 MuiDialog-paper-4 MuiDialog-paperScrollPaper-5 MuiDialog-paperWidthSm-8 MuiDialog-paperFullWidth-10"
                                                  direction="up"
                                                  role="document"
                                                  style={
                                                    Object {
                                                      "visibility": "hidden",
                                                    }
                                                  }
                                                  tabIndex="-1"
                                                >
                                                  <WithStyles(DialogTitle)
                                                    id="event-form-slide-title"
                                                  >
                                                    <DialogTitle
                                                      classes={
                                                        Object {
                                                          "root": "MuiDialogTitle-root-43",
                                                        }
                                                      }
                                                      disableTypography={false}
                                                      id="event-form-slide-title"
                                                    >
                                                      <div
                                                        className="MuiDialogTitle-root-43"
                                                        id="event-form-slide-title"
                                                      >
                                                        <WithStyles(Typography)
                                                          variant="title"
                                                        >
                                                          <Typography
                                                            align="inherit"
                                                            classes={
                                                              Object {
                                                                "alignCenter": "MuiTypography-alignCenter-57",
                                                                "alignJustify": "MuiTypography-alignJustify-59",
                                                                "alignLeft": "MuiTypography-alignLeft-56",
                                                                "alignRight": "MuiTypography-alignRight-58",
                                                                "body1": "MuiTypography-body1-53",
                                                                "body2": "MuiTypography-body2-52",
                                                                "button": "MuiTypography-button-55",
                                                                "caption": "MuiTypography-caption-54",
                                                                "colorError": "MuiTypography-colorError-68",
                                                                "colorInherit": "MuiTypography-colorInherit-63",
                                                                "colorPrimary": "MuiTypography-colorPrimary-64",
                                                                "colorSecondary": "MuiTypography-colorSecondary-65",
                                                                "colorTextPrimary": "MuiTypography-colorTextPrimary-66",
                                                                "colorTextSecondary": "MuiTypography-colorTextSecondary-67",
                                                                "display1": "MuiTypography-display1-48",
                                                                "display2": "MuiTypography-display2-47",
                                                                "display3": "MuiTypography-display3-46",
                                                                "display4": "MuiTypography-display4-45",
                                                                "gutterBottom": "MuiTypography-gutterBottom-61",
                                                                "headline": "MuiTypography-headline-49",
                                                                "noWrap": "MuiTypography-noWrap-60",
                                                                "paragraph": "MuiTypography-paragraph-62",
                                                                "root": "MuiTypography-root-44",
                                                                "subheading": "MuiTypography-subheading-51",
                                                                "title": "MuiTypography-title-50",
                                                              }
                                                            }
                                                            color="default"
                                                            gutterBottom={false}
                                                            headlineMapping={
                                                              Object {
                                                                "body1": "p",
                                                                "body2": "aside",
                                                                "display1": "h1",
                                                                "display2": "h1",
                                                                "display3": "h1",
                                                                "display4": "h1",
                                                                "headline": "h1",
                                                                "subheading": "h3",
                                                                "title": "h2",
                                                              }
                                                            }
                                                            noWrap={false}
                                                            paragraph={false}
                                                            variant="title"
                                                          >
                                                            <h2
                                                              className="MuiTypography-root-44 MuiTypography-title-50"
                                                            >
                                                              Create new event
                                                            </h2>
                                                          </Typography>
                                                        </WithStyles(Typography)>
                                                      </div>
                                                    </DialogTitle>
                                                  </WithStyles(DialogTitle)>
                                                  <WithStyles(DialogContent)>
                                                    <DialogContent
                                                      classes={
                                                        Object {
                                                          "root": "MuiDialogContent-root-69",
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="MuiDialogContent-root-69"
                                                      >
                                                        <form
                                                          autoComplete="off"
                                                          noValidate={true}
                                                        >
                                                          <WithStyles(FormControl)
                                                            aria-describedby="summary"
                                                            fullWidth={true}
                                                            margin="normal"
                                                            required={true}
                                                          >
                                                            <FormControl
                                                              aria-describedby="summary"
                                                              classes={
                                                                Object {
                                                                  "fullWidth": "MuiFormControl-fullWidth-73",
                                                                  "marginDense": "MuiFormControl-marginDense-72",
                                                                  "marginNormal": "MuiFormControl-marginNormal-71",
                                                                  "root": "MuiFormControl-root-70",
                                                                }
                                                              }
                                                              component="div"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={true}
                                                              margin="normal"
                                                              required={true}
                                                            >
                                                              <div
                                                                aria-describedby="summary"
                                                                className="MuiFormControl-root-70 MuiFormControl-marginNormal-71 MuiFormControl-fullWidth-73"
                                                              >
                                                                <WithStyles(InputLabel)
                                                                  htmlFor="summary"
                                                                  required={true}
                                                                >
                                                                  <InputLabel
                                                                    classes={
                                                                      Object {
                                                                        "animated": "MuiInputLabel-animated-78",
                                                                        "formControl": "MuiInputLabel-formControl-75",
                                                                        "marginDense": "MuiInputLabel-marginDense-76",
                                                                        "root": "MuiInputLabel-root-74",
                                                                        "shrink": "MuiInputLabel-shrink-77",
                                                                      }
                                                                    }
                                                                    disableAnimation={false}
                                                                    htmlFor="summary"
                                                                    required={true}
                                                                  >
                                                                    <WithStyles(FormLabel)
                                                                      className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78"
                                                                      data-shrink={false}
                                                                      htmlFor="summary"
                                                                      required={true}
                                                                    >
                                                                      <FormLabel
                                                                        className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78"
                                                                        classes={
                                                                          Object {
                                                                            "asterisk": "MuiFormLabel-asterisk-85",
                                                                            "disabled": "MuiFormLabel-disabled-81",
                                                                            "error": "MuiFormLabel-error-82",
                                                                            "filled": "MuiFormLabel-filled-83",
                                                                            "focused": "MuiFormLabel-focused-80",
                                                                            "required": "MuiFormLabel-required-84",
                                                                            "root": "MuiFormLabel-root-79",
                                                                          }
                                                                        }
                                                                        component="label"
                                                                        data-shrink={false}
                                                                        htmlFor="summary"
                                                                        required={true}
                                                                      >
                                                                        <label
                                                                          className="MuiFormLabel-root-79 MuiFormLabel-required-84 MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78"
                                                                          data-shrink={false}
                                                                          htmlFor="summary"
                                                                        >
                                                                          Summary
                                                                          <span
                                                                            className="MuiFormLabel-asterisk-85"
                                                                          >
                                                                             *
                                                                          </span>
                                                                        </label>
                                                                      </FormLabel>
                                                                    </WithStyles(FormLabel)>
                                                                  </InputLabel>
                                                                </WithStyles(InputLabel)>
                                                                <WithStyles(Input)
                                                                  id="summary"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  required={true}
                                                                  value=""
                                                                >
                                                                  <Input
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiInput-disabled-89",
                                                                        "error": "MuiInput-error-91",
                                                                        "focused": "MuiInput-focused-88",
                                                                        "formControl": "MuiInput-formControl-87",
                                                                        "fullWidth": "MuiInput-fullWidth-93",
                                                                        "input": "MuiInput-input-94",
                                                                        "inputMarginDense": "MuiInput-inputMarginDense-95",
                                                                        "inputMultiline": "MuiInput-inputMultiline-96",
                                                                        "inputType": "MuiInput-inputType-97",
                                                                        "inputTypeSearch": "MuiInput-inputTypeSearch-98",
                                                                        "multiline": "MuiInput-multiline-92",
                                                                        "root": "MuiInput-root-86",
                                                                        "underline": "MuiInput-underline-90",
                                                                      }
                                                                    }
                                                                    disableUnderline={false}
                                                                    fullWidth={false}
                                                                    id="summary"
                                                                    multiline={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    required={true}
                                                                    type="text"
                                                                    value=""
                                                                  >
                                                                    <div
                                                                      className="MuiInput-root-86 MuiInput-formControl-87 MuiInput-underline-90"
                                                                      required={true}
                                                                    >
                                                                      <input
                                                                        aria-invalid={false}
                                                                        className="MuiInput-input-94"
                                                                        disabled={false}
                                                                        id="summary"
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        required={true}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </div>
                                                                  </Input>
                                                                </WithStyles(Input)>
                                                                <WithStyles(FormHelperText)>
                                                                  <FormHelperText
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiFormHelperText-disabled-101",
                                                                        "error": "MuiFormHelperText-error-100",
                                                                        "filled": "MuiFormHelperText-filled-104",
                                                                        "focused": "MuiFormHelperText-focused-103",
                                                                        "marginDense": "MuiFormHelperText-marginDense-102",
                                                                        "required": "MuiFormHelperText-required-105",
                                                                        "root": "MuiFormHelperText-root-99",
                                                                      }
                                                                    }
                                                                    component="p"
                                                                  >
                                                                    <p
                                                                      className="MuiFormHelperText-root-99 MuiFormHelperText-required-105"
                                                                    >
                                                                      ex: Workshop 1: AWS 101 - Introduction to AWS Cloud Computing
                                                                    </p>
                                                                  </FormHelperText>
                                                                </WithStyles(FormHelperText)>
                                                              </div>
                                                            </FormControl>
                                                          </WithStyles(FormControl)>
                                                          <WithStyles(FormControl)
                                                            aria-describedby="description"
                                                            fullWidth={true}
                                                          >
                                                            <FormControl
                                                              aria-describedby="description"
                                                              classes={
                                                                Object {
                                                                  "fullWidth": "MuiFormControl-fullWidth-73",
                                                                  "marginDense": "MuiFormControl-marginDense-72",
                                                                  "marginNormal": "MuiFormControl-marginNormal-71",
                                                                  "root": "MuiFormControl-root-70",
                                                                }
                                                              }
                                                              component="div"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={true}
                                                              margin="none"
                                                              required={false}
                                                            >
                                                              <div
                                                                aria-describedby="description"
                                                                className="MuiFormControl-root-70 MuiFormControl-fullWidth-73"
                                                              >
                                                                <WithStyles(InputLabel)
                                                                  htmlFor="description"
                                                                >
                                                                  <InputLabel
                                                                    classes={
                                                                      Object {
                                                                        "animated": "MuiInputLabel-animated-78",
                                                                        "formControl": "MuiInputLabel-formControl-75",
                                                                        "marginDense": "MuiInputLabel-marginDense-76",
                                                                        "root": "MuiInputLabel-root-74",
                                                                        "shrink": "MuiInputLabel-shrink-77",
                                                                      }
                                                                    }
                                                                    disableAnimation={false}
                                                                    htmlFor="description"
                                                                  >
                                                                    <WithStyles(FormLabel)
                                                                      className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78"
                                                                      data-shrink={false}
                                                                      htmlFor="description"
                                                                    >
                                                                      <FormLabel
                                                                        className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78"
                                                                        classes={
                                                                          Object {
                                                                            "asterisk": "MuiFormLabel-asterisk-85",
                                                                            "disabled": "MuiFormLabel-disabled-81",
                                                                            "error": "MuiFormLabel-error-82",
                                                                            "filled": "MuiFormLabel-filled-83",
                                                                            "focused": "MuiFormLabel-focused-80",
                                                                            "required": "MuiFormLabel-required-84",
                                                                            "root": "MuiFormLabel-root-79",
                                                                          }
                                                                        }
                                                                        component="label"
                                                                        data-shrink={false}
                                                                        htmlFor="description"
                                                                      >
                                                                        <label
                                                                          className="MuiFormLabel-root-79 MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78"
                                                                          data-shrink={false}
                                                                          htmlFor="description"
                                                                        >
                                                                          Description
                                                                        </label>
                                                                      </FormLabel>
                                                                    </WithStyles(FormLabel)>
                                                                  </InputLabel>
                                                                </WithStyles(InputLabel)>
                                                                <WithStyles(Input)
                                                                  id="description"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  value=""
                                                                >
                                                                  <Input
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiInput-disabled-89",
                                                                        "error": "MuiInput-error-91",
                                                                        "focused": "MuiInput-focused-88",
                                                                        "formControl": "MuiInput-formControl-87",
                                                                        "fullWidth": "MuiInput-fullWidth-93",
                                                                        "input": "MuiInput-input-94",
                                                                        "inputMarginDense": "MuiInput-inputMarginDense-95",
                                                                        "inputMultiline": "MuiInput-inputMultiline-96",
                                                                        "inputType": "MuiInput-inputType-97",
                                                                        "inputTypeSearch": "MuiInput-inputTypeSearch-98",
                                                                        "multiline": "MuiInput-multiline-92",
                                                                        "root": "MuiInput-root-86",
                                                                        "underline": "MuiInput-underline-90",
                                                                      }
                                                                    }
                                                                    disableUnderline={false}
                                                                    fullWidth={false}
                                                                    id="description"
                                                                    multiline={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    type="text"
                                                                    value=""
                                                                  >
                                                                    <div
                                                                      className="MuiInput-root-86 MuiInput-formControl-87 MuiInput-underline-90"
                                                                    >
                                                                      <input
                                                                        aria-invalid={false}
                                                                        className="MuiInput-input-94"
                                                                        disabled={false}
                                                                        id="description"
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        required={false}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </div>
                                                                  </Input>
                                                                </WithStyles(Input)>
                                                              </div>
                                                            </FormControl>
                                                          </WithStyles(FormControl)>
                                                          <WithStyles(FormControl)
                                                            aria-describedby="location"
                                                            fullWidth={true}
                                                            margin="normal"
                                                            required={true}
                                                          >
                                                            <FormControl
                                                              aria-describedby="location"
                                                              classes={
                                                                Object {
                                                                  "fullWidth": "MuiFormControl-fullWidth-73",
                                                                  "marginDense": "MuiFormControl-marginDense-72",
                                                                  "marginNormal": "MuiFormControl-marginNormal-71",
                                                                  "root": "MuiFormControl-root-70",
                                                                }
                                                              }
                                                              component="div"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={true}
                                                              margin="normal"
                                                              required={true}
                                                            >
                                                              <div
                                                                aria-describedby="location"
                                                                className="MuiFormControl-root-70 MuiFormControl-marginNormal-71 MuiFormControl-fullWidth-73"
                                                              >
                                                                <WithStyles(InputLabel)
                                                                  htmlFor="location"
                                                                  required={true}
                                                                >
                                                                  <InputLabel
                                                                    classes={
                                                                      Object {
                                                                        "animated": "MuiInputLabel-animated-78",
                                                                        "formControl": "MuiInputLabel-formControl-75",
                                                                        "marginDense": "MuiInputLabel-marginDense-76",
                                                                        "root": "MuiInputLabel-root-74",
                                                                        "shrink": "MuiInputLabel-shrink-77",
                                                                      }
                                                                    }
                                                                    disableAnimation={false}
                                                                    htmlFor="location"
                                                                    required={true}
                                                                  >
                                                                    <WithStyles(FormLabel)
                                                                      className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78"
                                                                      data-shrink={false}
                                                                      htmlFor="location"
                                                                      required={true}
                                                                    >
                                                                      <FormLabel
                                                                        className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78"
                                                                        classes={
                                                                          Object {
                                                                            "asterisk": "MuiFormLabel-asterisk-85",
                                                                            "disabled": "MuiFormLabel-disabled-81",
                                                                            "error": "MuiFormLabel-error-82",
                                                                            "filled": "MuiFormLabel-filled-83",
                                                                            "focused": "MuiFormLabel-focused-80",
                                                                            "required": "MuiFormLabel-required-84",
                                                                            "root": "MuiFormLabel-root-79",
                                                                          }
                                                                        }
                                                                        component="label"
                                                                        data-shrink={false}
                                                                        htmlFor="location"
                                                                        required={true}
                                                                      >
                                                                        <label
                                                                          className="MuiFormLabel-root-79 MuiFormLabel-required-84 MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78"
                                                                          data-shrink={false}
                                                                          htmlFor="location"
                                                                        >
                                                                          Location
                                                                          <span
                                                                            className="MuiFormLabel-asterisk-85"
                                                                          >
                                                                             *
                                                                          </span>
                                                                        </label>
                                                                      </FormLabel>
                                                                    </WithStyles(FormLabel)>
                                                                  </InputLabel>
                                                                </WithStyles(InputLabel)>
                                                                <WithStyles(Input)
                                                                  id="location"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  required={true}
                                                                  value=""
                                                                >
                                                                  <Input
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiInput-disabled-89",
                                                                        "error": "MuiInput-error-91",
                                                                        "focused": "MuiInput-focused-88",
                                                                        "formControl": "MuiInput-formControl-87",
                                                                        "fullWidth": "MuiInput-fullWidth-93",
                                                                        "input": "MuiInput-input-94",
                                                                        "inputMarginDense": "MuiInput-inputMarginDense-95",
                                                                        "inputMultiline": "MuiInput-inputMultiline-96",
                                                                        "inputType": "MuiInput-inputType-97",
                                                                        "inputTypeSearch": "MuiInput-inputTypeSearch-98",
                                                                        "multiline": "MuiInput-multiline-92",
                                                                        "root": "MuiInput-root-86",
                                                                        "underline": "MuiInput-underline-90",
                                                                      }
                                                                    }
                                                                    disableUnderline={false}
                                                                    fullWidth={false}
                                                                    id="location"
                                                                    multiline={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    required={true}
                                                                    type="text"
                                                                    value=""
                                                                  >
                                                                    <div
                                                                      className="MuiInput-root-86 MuiInput-formControl-87 MuiInput-underline-90"
                                                                      required={true}
                                                                    >
                                                                      <input
                                                                        aria-invalid={false}
                                                                        className="MuiInput-input-94"
                                                                        disabled={false}
                                                                        id="location"
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        required={true}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </div>
                                                                  </Input>
                                                                </WithStyles(Input)>
                                                                <WithStyles(FormHelperText)>
                                                                  <FormHelperText
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiFormHelperText-disabled-101",
                                                                        "error": "MuiFormHelperText-error-100",
                                                                        "filled": "MuiFormHelperText-filled-104",
                                                                        "focused": "MuiFormHelperText-focused-103",
                                                                        "marginDense": "MuiFormHelperText-marginDense-102",
                                                                        "required": "MuiFormHelperText-required-105",
                                                                        "root": "MuiFormHelperText-root-99",
                                                                      }
                                                                    }
                                                                    component="p"
                                                                  >
                                                                    <p
                                                                      className="MuiFormHelperText-root-99 MuiFormHelperText-required-105"
                                                                    >
                                                                      ex: Taipei
                                                                    </p>
                                                                  </FormHelperText>
                                                                </WithStyles(FormHelperText)>
                                                              </div>
                                                            </FormControl>
                                                          </WithStyles(FormControl)>
                                                          <WithStyles(FormControl)
                                                            aria-describedby="start"
                                                            margin="normal"
                                                            required={true}
                                                          >
                                                            <FormControl
                                                              aria-describedby="start"
                                                              classes={
                                                                Object {
                                                                  "fullWidth": "MuiFormControl-fullWidth-73",
                                                                  "marginDense": "MuiFormControl-marginDense-72",
                                                                  "marginNormal": "MuiFormControl-marginNormal-71",
                                                                  "root": "MuiFormControl-root-70",
                                                                }
                                                              }
                                                              component="div"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={false}
                                                              margin="normal"
                                                              required={true}
                                                            >
                                                              <div
                                                                aria-describedby="start"
                                                                className="MuiFormControl-root-70 MuiFormControl-marginNormal-71"
                                                              >
                                                                <WithStyles(InputLabel)
                                                                  htmlFor="start"
                                                                  required={true}
                                                                >
                                                                  <InputLabel
                                                                    classes={
                                                                      Object {
                                                                        "animated": "MuiInputLabel-animated-78",
                                                                        "formControl": "MuiInputLabel-formControl-75",
                                                                        "marginDense": "MuiInputLabel-marginDense-76",
                                                                        "root": "MuiInputLabel-root-74",
                                                                        "shrink": "MuiInputLabel-shrink-77",
                                                                      }
                                                                    }
                                                                    disableAnimation={false}
                                                                    htmlFor="start"
                                                                    required={true}
                                                                  >
                                                                    <WithStyles(FormLabel)
                                                                      className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78 MuiInputLabel-shrink-77"
                                                                      data-shrink={true}
                                                                      htmlFor="start"
                                                                      required={true}
                                                                    >
                                                                      <FormLabel
                                                                        className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78 MuiInputLabel-shrink-77"
                                                                        classes={
                                                                          Object {
                                                                            "asterisk": "MuiFormLabel-asterisk-85",
                                                                            "disabled": "MuiFormLabel-disabled-81",
                                                                            "error": "MuiFormLabel-error-82",
                                                                            "filled": "MuiFormLabel-filled-83",
                                                                            "focused": "MuiFormLabel-focused-80",
                                                                            "required": "MuiFormLabel-required-84",
                                                                            "root": "MuiFormLabel-root-79",
                                                                          }
                                                                        }
                                                                        component="label"
                                                                        data-shrink={true}
                                                                        htmlFor="start"
                                                                        required={true}
                                                                      >
                                                                        <label
                                                                          className="MuiFormLabel-root-79 MuiFormLabel-filled-83 MuiFormLabel-required-84 MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78 MuiInputLabel-shrink-77"
                                                                          data-shrink={true}
                                                                          htmlFor="start"
                                                                        >
                                                                          Start
                                                                          <span
                                                                            className="MuiFormLabel-asterisk-85"
                                                                          >
                                                                             *
                                                                          </span>
                                                                        </label>
                                                                      </FormLabel>
                                                                    </WithStyles(FormLabel)>
                                                                  </InputLabel>
                                                                </WithStyles(InputLabel)>
                                                                <WithStyles(Input)
                                                                  id="start"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  required={true}
                                                                  type="datetime-local"
                                                                  value="mock"
                                                                >
                                                                  <Input
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiInput-disabled-89",
                                                                        "error": "MuiInput-error-91",
                                                                        "focused": "MuiInput-focused-88",
                                                                        "formControl": "MuiInput-formControl-87",
                                                                        "fullWidth": "MuiInput-fullWidth-93",
                                                                        "input": "MuiInput-input-94",
                                                                        "inputMarginDense": "MuiInput-inputMarginDense-95",
                                                                        "inputMultiline": "MuiInput-inputMultiline-96",
                                                                        "inputType": "MuiInput-inputType-97",
                                                                        "inputTypeSearch": "MuiInput-inputTypeSearch-98",
                                                                        "multiline": "MuiInput-multiline-92",
                                                                        "root": "MuiInput-root-86",
                                                                        "underline": "MuiInput-underline-90",
                                                                      }
                                                                    }
                                                                    disableUnderline={false}
                                                                    fullWidth={false}
                                                                    id="start"
                                                                    multiline={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    required={true}
                                                                    type="datetime-local"
                                                                    value="mock"
                                                                  >
                                                                    <div
                                                                      className="MuiInput-root-86 MuiInput-formControl-87 MuiInput-underline-90"
                                                                      required={true}
                                                                    >
                                                                      <input
                                                                        aria-invalid={false}
                                                                        className="MuiInput-input-94 MuiInput-inputType-97"
                                                                        disabled={false}
                                                                        id="start"
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        required={true}
                                                                        type="datetime-local"
                                                                        value="mock"
                                                                      />
                                                                    </div>
                                                                  </Input>
                                                                </WithStyles(Input)>
                                                              </div>
                                                            </FormControl>
                                                          </WithStyles(FormControl)>
                                                          <WithStyles(FormControl)
                                                            aria-describedby="end"
                                                            margin="normal"
                                                            required={true}
                                                          >
                                                            <FormControl
                                                              aria-describedby="end"
                                                              classes={
                                                                Object {
                                                                  "fullWidth": "MuiFormControl-fullWidth-73",
                                                                  "marginDense": "MuiFormControl-marginDense-72",
                                                                  "marginNormal": "MuiFormControl-marginNormal-71",
                                                                  "root": "MuiFormControl-root-70",
                                                                }
                                                              }
                                                              component="div"
                                                              disabled={false}
                                                              error={false}
                                                              fullWidth={false}
                                                              margin="normal"
                                                              required={true}
                                                            >
                                                              <div
                                                                aria-describedby="end"
                                                                className="MuiFormControl-root-70 MuiFormControl-marginNormal-71"
                                                              >
                                                                <WithStyles(InputLabel)
                                                                  htmlFor="end"
                                                                  required={true}
                                                                >
                                                                  <InputLabel
                                                                    classes={
                                                                      Object {
                                                                        "animated": "MuiInputLabel-animated-78",
                                                                        "formControl": "MuiInputLabel-formControl-75",
                                                                        "marginDense": "MuiInputLabel-marginDense-76",
                                                                        "root": "MuiInputLabel-root-74",
                                                                        "shrink": "MuiInputLabel-shrink-77",
                                                                      }
                                                                    }
                                                                    disableAnimation={false}
                                                                    htmlFor="end"
                                                                    required={true}
                                                                  >
                                                                    <WithStyles(FormLabel)
                                                                      className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78 MuiInputLabel-shrink-77"
                                                                      data-shrink={true}
                                                                      htmlFor="end"
                                                                      required={true}
                                                                    >
                                                                      <FormLabel
                                                                        className="MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78 MuiInputLabel-shrink-77"
                                                                        classes={
                                                                          Object {
                                                                            "asterisk": "MuiFormLabel-asterisk-85",
                                                                            "disabled": "MuiFormLabel-disabled-81",
                                                                            "error": "MuiFormLabel-error-82",
                                                                            "filled": "MuiFormLabel-filled-83",
                                                                            "focused": "MuiFormLabel-focused-80",
                                                                            "required": "MuiFormLabel-required-84",
                                                                            "root": "MuiFormLabel-root-79",
                                                                          }
                                                                        }
                                                                        component="label"
                                                                        data-shrink={true}
                                                                        htmlFor="end"
                                                                        required={true}
                                                                      >
                                                                        <label
                                                                          className="MuiFormLabel-root-79 MuiFormLabel-filled-83 MuiFormLabel-required-84 MuiInputLabel-root-74 MuiInputLabel-formControl-75 MuiInputLabel-animated-78 MuiInputLabel-shrink-77"
                                                                          data-shrink={true}
                                                                          htmlFor="end"
                                                                        >
                                                                          End
                                                                          <span
                                                                            className="MuiFormLabel-asterisk-85"
                                                                          >
                                                                             *
                                                                          </span>
                                                                        </label>
                                                                      </FormLabel>
                                                                    </WithStyles(FormLabel)>
                                                                  </InputLabel>
                                                                </WithStyles(InputLabel)>
                                                                <WithStyles(Input)
                                                                  id="end"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  required={true}
                                                                  type="datetime-local"
                                                                  value="mock"
                                                                >
                                                                  <Input
                                                                    classes={
                                                                      Object {
                                                                        "disabled": "MuiInput-disabled-89",
                                                                        "error": "MuiInput-error-91",
                                                                        "focused": "MuiInput-focused-88",
                                                                        "formControl": "MuiInput-formControl-87",
                                                                        "fullWidth": "MuiInput-fullWidth-93",
                                                                        "input": "MuiInput-input-94",
                                                                        "inputMarginDense": "MuiInput-inputMarginDense-95",
                                                                        "inputMultiline": "MuiInput-inputMultiline-96",
                                                                        "inputType": "MuiInput-inputType-97",
                                                                        "inputTypeSearch": "MuiInput-inputTypeSearch-98",
                                                                        "multiline": "MuiInput-multiline-92",
                                                                        "root": "MuiInput-root-86",
                                                                        "underline": "MuiInput-underline-90",
                                                                      }
                                                                    }
                                                                    disableUnderline={false}
                                                                    fullWidth={false}
                                                                    id="end"
                                                                    multiline={false}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    required={true}
                                                                    type="datetime-local"
                                                                    value="mock"
                                                                  >
                                                                    <div
                                                                      className="MuiInput-root-86 MuiInput-formControl-87 MuiInput-underline-90"
                                                                      required={true}
                                                                    >
                                                                      <input
                                                                        aria-invalid={false}
                                                                        className="MuiInput-input-94 MuiInput-inputType-97"
                                                                        disabled={false}
                                                                        id="end"
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        required={true}
                                                                        type="datetime-local"
                                                                        value="mock"
                                                                      />
                                                                    </div>
                                                                  </Input>
                                                                </WithStyles(Input)>
                                                              </div>
                                                            </FormControl>
                                                          </WithStyles(FormControl)>
                                                        </form>
                                                      </div>
                                                    </DialogContent>
                                                  </WithStyles(DialogContent)>
                                                  <WithStyles(DialogActions)>
                                                    <DialogActions
                                                      classes={
                                                        Object {
                                                          "action": "MuiDialogActions-action-107",
                                                          "root": "MuiDialogActions-root-106",
                                                        }
                                                      }
                                                      disableActionSpacing={false}
                                                    >
                                                      <div
                                                        className="MuiDialogActions-root-106"
                                                      >
                                                        <WithStyles(Button)
                                                          className="MuiDialogActions-action-107"
                                                          color="primary"
                                                          key=".0"
                                                          onClick={[Function]}
                                                        >
                                                          <Button
                                                            className="MuiDialogActions-action-107"
                                                            classes={
                                                              Object {
                                                                "colorInherit": "MuiButton-colorInherit-127",
                                                                "contained": "MuiButton-contained-117",
                                                                "containedPrimary": "MuiButton-containedPrimary-118",
                                                                "containedSecondary": "MuiButton-containedSecondary-119",
                                                                "disabled": "MuiButton-disabled-126",
                                                                "extendedFab": "MuiButton-extendedFab-124",
                                                                "fab": "MuiButton-fab-123",
                                                                "flat": "MuiButton-flat-113",
                                                                "flatPrimary": "MuiButton-flatPrimary-114",
                                                                "flatSecondary": "MuiButton-flatSecondary-115",
                                                                "focusVisible": "MuiButton-focusVisible-125",
                                                                "fullWidth": "MuiButton-fullWidth-131",
                                                                "label": "MuiButton-label-109",
                                                                "mini": "MuiButton-mini-128",
                                                                "outlined": "MuiButton-outlined-116",
                                                                "raised": "MuiButton-raised-120",
                                                                "raisedPrimary": "MuiButton-raisedPrimary-121",
                                                                "raisedSecondary": "MuiButton-raisedSecondary-122",
                                                                "root": "MuiButton-root-108",
                                                                "sizeLarge": "MuiButton-sizeLarge-130",
                                                                "sizeSmall": "MuiButton-sizeSmall-129",
                                                                "text": "MuiButton-text-110",
                                                                "textPrimary": "MuiButton-textPrimary-111",
                                                                "textSecondary": "MuiButton-textSecondary-112",
                                                              }
                                                            }
                                                            color="primary"
                                                            component="button"
                                                            disableFocusRipple={false}
                                                            disabled={false}
                                                            fullWidth={false}
                                                            mini={false}
                                                            onClick={[Function]}
                                                            size="medium"
                                                            type="button"
                                                            variant="text"
                                                          >
                                                            <WithStyles(ButtonBase)
                                                              className="MuiButton-root-108 MuiButton-text-110 MuiButton-textPrimary-111 MuiButton-flat-113 MuiButton-flatPrimary-114 MuiDialogActions-action-107"
                                                              component="button"
                                                              disabled={false}
                                                              focusRipple={true}
                                                              focusVisibleClassName="MuiButton-focusVisible-125"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ButtonBase
                                                                centerRipple={false}
                                                                className="MuiButton-root-108 MuiButton-text-110 MuiButton-textPrimary-111 MuiButton-flat-113 MuiButton-flatPrimary-114 MuiDialogActions-action-107"
                                                                classes={
                                                                  Object {
                                                                    "disabled": "MuiButtonBase-disabled-133",
                                                                    "focusVisible": "MuiButtonBase-focusVisible-134",
                                                                    "root": "MuiButtonBase-root-132",
                                                                  }
                                                                }
                                                                component="button"
                                                                disableRipple={false}
                                                                disableTouchRipple={false}
                                                                disabled={false}
                                                                focusRipple={true}
                                                                focusVisibleClassName="MuiButton-focusVisible-125"
                                                                onClick={[Function]}
                                                                tabIndex="0"
                                                                type="button"
                                                              >
                                                                <button
                                                                  className="MuiButtonBase-root-132 MuiButton-root-108 MuiButton-text-110 MuiButton-textPrimary-111 MuiButton-flat-113 MuiButton-flatPrimary-114 MuiDialogActions-action-107"
                                                                  disabled={false}
                                                                  onBlur={[Function]}
                                                                  onClick={[Function]}
                                                                  onFocus={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onKeyUp={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                  onMouseUp={[Function]}
                                                                  onTouchEnd={[Function]}
                                                                  onTouchMove={[Function]}
                                                                  onTouchStart={[Function]}
                                                                  tabIndex="0"
                                                                  type="button"
                                                                >
                                                                  <span
                                                                    className="MuiButton-label-109"
                                                                  >
                                                                    Cancel
                                                                  </span>
                                                                  <WithStyles(TouchRipple)
                                                                    center={false}
                                                                    innerRef={[Function]}
                                                                  >
                                                                    <TouchRipple
                                                                      center={false}
                                                                      classes={
                                                                        Object {
                                                                          "child": "MuiTouchRipple-child-139",
                                                                          "childLeaving": "MuiTouchRipple-childLeaving-140",
                                                                          "childPulsate": "MuiTouchRipple-childPulsate-141",
                                                                          "ripple": "MuiTouchRipple-ripple-136",
                                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate-138",
                                                                          "rippleVisible": "MuiTouchRipple-rippleVisible-137",
                                                                          "root": "MuiTouchRipple-root-135",
                                                                        }
                                                                      }
                                                                    >
                                                                      <TransitionGroup
                                                                        childFactory={[Function]}
                                                                        className="MuiTouchRipple-root-135"
                                                                        component="span"
                                                                        enter={true}
                                                                        exit={true}
                                                                      >
                                                                        <span
                                                                          className="MuiTouchRipple-root-135"
                                                                        />
                                                                      </TransitionGroup>
                                                                    </TouchRipple>
                                                                  </WithStyles(TouchRipple)>
                                                                </button>
                                                              </ButtonBase>
                                                            </WithStyles(ButtonBase)>
                                                          </Button>
                                                        </WithStyles(Button)>
                                                        <WithStyles(Button)
                                                          className="MuiDialogActions-action-107"
                                                          color="primary"
                                                          disabled={true}
                                                          key=".1"
                                                          onClick={[Function]}
                                                          variant="contained"
                                                        >
                                                          <Button
                                                            className="MuiDialogActions-action-107"
                                                            classes={
                                                              Object {
                                                                "colorInherit": "MuiButton-colorInherit-127",
                                                                "contained": "MuiButton-contained-117",
                                                                "containedPrimary": "MuiButton-containedPrimary-118",
                                                                "containedSecondary": "MuiButton-containedSecondary-119",
                                                                "disabled": "MuiButton-disabled-126",
                                                                "extendedFab": "MuiButton-extendedFab-124",
                                                                "fab": "MuiButton-fab-123",
                                                                "flat": "MuiButton-flat-113",
                                                                "flatPrimary": "MuiButton-flatPrimary-114",
                                                                "flatSecondary": "MuiButton-flatSecondary-115",
                                                                "focusVisible": "MuiButton-focusVisible-125",
                                                                "fullWidth": "MuiButton-fullWidth-131",
                                                                "label": "MuiButton-label-109",
                                                                "mini": "MuiButton-mini-128",
                                                                "outlined": "MuiButton-outlined-116",
                                                                "raised": "MuiButton-raised-120",
                                                                "raisedPrimary": "MuiButton-raisedPrimary-121",
                                                                "raisedSecondary": "MuiButton-raisedSecondary-122",
                                                                "root": "MuiButton-root-108",
                                                                "sizeLarge": "MuiButton-sizeLarge-130",
                                                                "sizeSmall": "MuiButton-sizeSmall-129",
                                                                "text": "MuiButton-text-110",
                                                                "textPrimary": "MuiButton-textPrimary-111",
                                                                "textSecondary": "MuiButton-textSecondary-112",
                                                              }
                                                            }
                                                            color="primary"
                                                            component="button"
                                                            disableFocusRipple={false}
                                                            disabled={true}
                                                            fullWidth={false}
                                                            mini={false}
                                                            onClick={[Function]}
                                                            size="medium"
                                                            type="button"
                                                            variant="contained"
                                                          >
                                                            <WithStyles(ButtonBase)
                                                              className="MuiButton-root-108 MuiButton-contained-117 MuiButton-containedPrimary-118 MuiButton-raised-120 MuiButton-raisedPrimary-121 MuiButton-disabled-126 MuiDialogActions-action-107"
                                                              component="button"
                                                              disabled={true}
                                                              focusRipple={true}
                                                              focusVisibleClassName="MuiButton-focusVisible-125"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ButtonBase
                                                                centerRipple={false}
                                                                className="MuiButton-root-108 MuiButton-contained-117 MuiButton-containedPrimary-118 MuiButton-raised-120 MuiButton-raisedPrimary-121 MuiButton-disabled-126 MuiDialogActions-action-107"
                                                                classes={
                                                                  Object {
                                                                    "disabled": "MuiButtonBase-disabled-133",
                                                                    "focusVisible": "MuiButtonBase-focusVisible-134",
                                                                    "root": "MuiButtonBase-root-132",
                                                                  }
                                                                }
                                                                component="button"
                                                                disableRipple={false}
                                                                disableTouchRipple={false}
                                                                disabled={true}
                                                                focusRipple={true}
                                                                focusVisibleClassName="MuiButton-focusVisible-125"
                                                                onClick={[Function]}
                                                                tabIndex="0"
                                                                type="button"
                                                              >
                                                                <button
                                                                  className="MuiButtonBase-root-132 MuiButtonBase-disabled-133 MuiButton-root-108 MuiButton-contained-117 MuiButton-containedPrimary-118 MuiButton-raised-120 MuiButton-raisedPrimary-121 MuiButton-disabled-126 MuiDialogActions-action-107"
                                                                  disabled={true}
                                                                  onBlur={[Function]}
                                                                  onClick={[Function]}
                                                                  onFocus={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onKeyUp={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                  onMouseUp={[Function]}
                                                                  onTouchEnd={[Function]}
                                                                  onTouchMove={[Function]}
                                                                  onTouchStart={[Function]}
                                                                  tabIndex="-1"
                                                                  type="button"
                                                                >
                                                                  <span
                                                                    className="MuiButton-label-109"
                                                                  >
                                                                    Submit
                                                                  </span>
                                                                </button>
                                                              </ButtonBase>
                                                            </WithStyles(ButtonBase)>
                                                          </Button>
                                                        </WithStyles(Button)>
                                                      </div>
                                                    </DialogActions>
                                                  </WithStyles(DialogActions)>
                                                </div>
                                              </Paper>
                                            </WithStyles(Paper)>
                                          </Transition>
                                        </EventListener>
                                      </Slide>
                                    </WithTheme(Slide)>
                                  </Transition>
                                </RootRef>
                              </div>
                            </Portal>
                          </Modal>
                        </WithStyles(Modal)>
                      </Dialog>
                    </WithStyles(Dialog)>
                  </PureEventForm>
                </Mutation>
              </updateEvent(PureEventForm)>
            </Mutation>
          </insertEvent(updateEvent(PureEventForm))>
        </Formik>
      </WithFormik(insertEvent(updateEvent(PureEventForm)))>
    </EventForm>
  </ApolloProvider>
</MockedProvider>
`;
